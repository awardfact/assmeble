<어셈블리 언어란>
어셈블리 언어는 컴퓨터 언어의 일종으로 기계어를 1:1로 매핑할 수 있는 가장 저 레벨의 언어이다 
어셈블리 언어는 CPU, 레지스터, 메모리 사이의 데이터를 조작하는 것을 주로 하며 C기준으로 볼 떄 어셈블리 언어에서
사용하는 함수는 CPU에 내장되어있다 CPU의 함수는 전통적으로 instruction 이라는 명칭으로 많이 사용한다 
따라서 어셈블리 언어로 프로그래밍 한다는 것은 CPU의 함수만을 사용하여 구현하고자 하는 기능을 구현한다고 말할 수 있다
CPU에서 지원하는 함수가 너무 저 레벨이라 로직을 구현하기 위해서는 반복적인 많은 일을 해야하는데 이렇게 반복되는 작업을
미리 함수로 구현해서 제공하는 것이 어셈블리 언어 입장에서는 운영체제이다 이외에도 하드웨어 제어를 위해 컴퓨터 메인보드
롬 바이오스라는 미리 내장되어있는 API도 사용이 가능하다 

현대 컴퓨터는 운영체제라는 기본 프로그램을 가지고 있는데 운영체제는 CPU를 비롯한 컴퓨터의 모든 리소스를 관리하기 때문에
이 운영체제가 정해놓은 규칙을 준수하는 바이너리만 해당 운영체제에서 실행이 가능하다 그리고 이런 규칙은 운영체제마다 다르다
따라서 특정 운영체제의 규칙을 준수핮는 바이너리는 다른 운영체제에서 실행을 할 수 없다
그리고 CPU에 있는 함수들은 기능이 너무 빈약해 좀 더 고급 기능이 필요한데 이런 고급기능의 함수를 제공하는것이 운영체제이다
운영체제의 고급 함수도 근본적으로는 CPU에 있는 저 레벨 함수로 만들어지지만 프로그램을 할 때마다 저 레벨을 이용해서
고급함수를 만드는것은 매우 비효율적이기 때문에 운영체제를 사용하는것이다 따라서 어셈블리 소스는 좋든 싫든
실행될 운영체제가 무엇인가에 따라 코드가 달라지게 된다



어셈블리 언어로 작성된 소스를 기계에서 실행 가능하게 바이너리(기계어)로 변환하는 프로그램을 어셈블러라고 한다
바이너리가 실행되려면 1. 기계어로 만들고 2. 필요한 라이브러리를 모두 저 레벨 함수로 결합하는 링킹 기능이 필요한데
이러한 기능을 하는것이 링커이다 
어셈블리를 어셈블러를 이용하여 기계어로 만들고(중간코드) 이 기계어를 링커를 이용해서 실행 파일로 만든다


어셈블리 언어로 프로그래밍하는것은 고급 언어에 비해 규칙이 단순하며 반복적인 부분이 많다 이런 이유로 편의를 위해
내부적으로 많은 매크로를 사용하게 되는데 이러한 매크로는 사용하는 어셈블러에 따라 각각 다르다 이러한 매크로의 차이에
의해 서로 다른 어셈블러는 소스 호환이 되지 않는 문제가 발생한다 윈도우에서는 주로 MASM어셈블러를 사용하며
리눅스/유닉스 계열은 GAS라는 어셈블러를 사용했다  

책에서는 윈도우 유닉스/리눅스 에서 공통으로 동작하는 NASM이라는 어셈블러를 사용한다 
그리고 GUI환경에서 편리하게 개발할 수 있도록 하는 SASM이라는 어셈블리 언어 통합 개발 환경과 GUI환경을 같이 사용한다
SASM은 화면 및 키보드 입출력 관련해서 서로 다른 운영체제 서비스 부분을 추상화 한 간단한 공통 매크로 함수를
제공해 초기에는 운영체제에 무관하게 이런 매크로 함수를 사용하여 진행하였다

어셈블리 언어에서 사용하는 문법 표기는 크게 2가지로 나뉘어지는데 인텔 표기법과 AT&T표기법이 있다
인텔 ex)  mov eax, 3 
AT&T ex) mov $3 , %eax
인텔 표기는 윈도우 기반에서 주로 사용되고 AT&T는 주로 리눅스 계열에서 많이 사용된다 책에서는 인텔 표기법으로 사용
현재 사용되고 있는 많은 어셈블러들은 위의 2가지중 1가지를 지원한다 NASM이 인텔표기를 지원한다
특히 코드는 특수한 경우를 제외하고는 대소문자를 구분하지 않는다 주석은 세미콜론(;)을 이용한다

설치는
https://dman95.github.io/SASM/english.html여기 들어가서  
Download for windows 클릭
설치 후 setting->setting클릭하고 build탭에서 mode는 x64, assembler는 nasm으로 설정한다 

</어셈블리 언어란>



<어셈블리 언어 기본 자원>
어셈블리 프로그래밍을 할 떄 인식해야 하는 세계는 3개의 요소로 구성된다
프로그램을 실행하면 프로그램의 명령어는 메모리(RAM)에 저장되어있고 CPU는 여기에 있는 명령어를 1개씩 가지고 와서 명령을 수행하는데
이때 필요한 임시 작업공간으로 레지스터를 사용한다 레지스터는 CPU가 사용하는 일종의 작업장으로 C언어에서 보면 아주 속도가 빠른
임시 저장소이다 CPU입장에서는 레지스터에서 데이터를 저장하고 읽어오는 것이 메모리에서 데이터를 저장하고 읽어오는 것보다 훨씬 빠르고 쉽다

어셈블리 프로그램을 작성하는 것은 CPU가 지원해 주는 각종 연산 기능들을 이용하여 레지스터나 메모리에 데이터를 저장하고
프로그램의 흐름을 변경하는 단순한 작업을 하는 것이다 단순한 로직들이 결합되어 상위의 복잡한 기능이 수행된다
요약하면 어셈블리 프로그램의 로직은 데이터 이동, 각종 연산, 실행 흐름 제어로 정리될 수 있다


프로그래머가 알고리즘을 구현할 떄 사용할 수 있는 특수한 변수를 레지스터라고 한다 레지스터의 크기는 설치되어있는 운영체제의
종류에 따라 다른데 64bit운영체제이면 64bit, 32bit운영체제이면 32bit를 최대로 사용할 수 있다 최근 출시되는 컴퓨터의 레지스터의 최대 크기는 64bit이다
레지스터는 데이터를 다루는 크기에 따라 각각 다른 이름으로 불러진다  A레지스터의 경우는 다음과 같다
ex) 64bit 단위 : RAX   32bit 단위 : EAX , 16bit 단위  : AX , 8bit 단위 : AH, AL

SASM으로 코딩할 때 section .text처럼 여러 이름의 section이 등장하는데 이러한 section은 특정한 목적의 데이터나 명령어를 
모아 놓은 공통 블럭이라고 생각하면 된다 그리고 동일한 종류의 section을 2회 이상 사용하는 경우도 있다 따라서 운영체제는
SASM이 만든 프로그램의 시작 주소를 global CMain 지시자로 보고 CMain이라는 주소에서부터 프로그램을 시작하게 된다
이 지시자는 어셈블러마다 조금씩 다르다 정리하면 어셈블리 언어로 코딩하는 순서는 필요한 section들을 선언하고 각각의 목적에
적합하도록 section을 완성하는 것이다 


레지스터는 주로 A,B,C,D레지스터를 사용한다 이외에도 특별한 용도의 레지스터가 있다 
A레지스터에 특정한 값을 설정하는 코드는 다음과 같다 
ex) mov eax , 0x1234(a레지스터 32bit크기에 0x1234값 저장)    mov ax, 0x1234(a레지스터 16bit크기에 0x1234저장)
    mov ax , bx(bx값을 ax로 복사)   mov  ax , ebx(ebx(32bit)값을 ax(16bit)로 복사하는건데 비트값이 달라서 오류)

</어셈블리 언어 기본 자원>


<메모리와 변수>
어셈블리에서 메모리를 사용하기 위해서는 두 가지를 결정해야 한다 첫 번째는 사용할 메모리의 크기를 결정하고 두 번쨰는
사용할 메모리의 위치를 결정하는 것이다 코드 작성 시점에서 메모리의 크기는 프로그래머가 결정할 수 있지만 메모리에서 사용할 주소는
알 수 없기 때문에 심벌로 결정하고 바이너리로 변경할 떄 결정하도록 하고있다 이런 심벌을 상위 언어에서는 변수라는 표현을 사용한다
변수는 메모리의 시작 주소와 사용되는 메모리의 크기를 의미한다고 할 수 있다 따라서 변수는 3가지 속성을 가지고 있다
시작 주소, 저장되어 있는 값, 데이터의 크기 

초기화되지 않은 변수는 section .bss블록에서 선언해야 하며, 사용하고자 하는 큭기와 변수 개수를 지정하면된다
ex) section .bss 변수이름 크기지시자 개수  
ex) section .bss a resb 1 
초기화되지 않은 변수 크기지시자( resb : 1byte , resw : 2byte , resd : 4byte , resq : 8byte)
초기값이 결정된 변수는 section .data블록에서 선언하며 사용 예는 다음과 같다
ex) section .data 변수이름 크기지시자 초기값
ex) section .data a db 0x12
초기값 있는 변수 크기지시자( db : 1byte , dw : 2byte , dd : 4byte , dq : 8byte)
초기값을 가지고 선언된 변수여도 코드에서 필요에 따라 변경하는 것이 가능하다 

메모리를 다루기 위해서는 변수를 사용해야 하며 변수는 크기,주소값,실제 저장된 값을 가지고 있다
메모리에 데이터를 보내는 명령어는 mov를 가장 많이 사용한다 보통 어셈블리 언어에서
메모리 변수이름은 주소값을 나타내며 주소가 가리키는 곳의 값은 "[변수이름]"형식으로 표현한다
ex) mov ax,[a] (변수 a에 저장되어 있는 값을 ax레지스터에 복사)
메모리 변수를 선언하면서 크기를 정해 주었다고 해도 CPU명령어들은 메모리에서 얼마의 크기로
다루어야할지 모르기 때문에 반드시 명시적으로 다루는 데이터의 크기를 명시해야 한다
이를 지키기 않으면 에러가 발생한다 
ex) mov [a], 0x34  ( 0x34의 크기를 명시하지 않아서 오류 발생)
ex) mov [a] , byte 0x34 (0x34의 크기를 지정해주었기 때문에 오류가 발생하지 않는다)

레지스터 및 메모리에 있는 값을 출력하기 위해서는 CPU에 있는 명령어 만으로는 어렵다 이러한
기능은 운영체제에 포함되어 있는데 운영체제마다 구체적인 코드들이 다르기 때문에 각각의
운영체제마다 다르게 공부하여야 한다 
SASM에서는 운영체제와 무관하게 제공하는 매크로 함수가 있어 운영체제와 무관하게 동일한
문법으로 입출력을 수행할 수 있다 물론 내부는 각각의 운영체제마다 입출력 함수를
준비하여 실행되는 환경에 대응하도록 되어있다  
SASM에서 지원하는 입출력 매크로 함수는 다음과 같으며 출력 결과는 output에 출력된다
PRINT_HEX  바이트 수 , 레지스터 또는 변수 이름 : 레지스터 또는 변수 값을 16진수로 출력
PRINT_DEC 바이트 수 , 레지스터 또는 변수이름 : 레지스터 또는 변수 값을 10진수로 출력
NEWLINE : 화면에 줄 변경을 출력
ex) PRINT HEX 2 , ax (ax레지스터의 값을  2byte단위로 16진수로 출력)
ex) PRINT_DEC 2 , ax (ax레지스터 값을 2byte단위로 10진수로 출력)


변수 a를 4byte로 예약하고 0x12345678을 이동시키면 메모리의 구조는 다음과 같이 된다
10 11 12 13  14 
78 56 34 12
우리가 쓰는 순서와는 반대로 들어간다 즉 가장 작은 자리의 값이 작은 주소에 먼저 들어간다
이러한 방식을 리틀엔디언이라고 한다 이와 반대 표현을 빅 엔디언이라고 하며 SPARK, RISC계열 CPU가 이런 방식을 사용한다
이런 표기법 차이는 CPU내부에서 연산을 더 빠르게 하기위한 전략과 관계가 있다

만약 a라는 메모리에 0x12fmf 2byte로 전송한다면 메모리는 이런 상태가 된다
100  101
12    00  
0x12로 표현한 것을 2byte로 확장하면 0x0012가 된다




</메모리와 변수>




<문자열>
SASM에서 제공하는 매크로 함수 중 문자열을 출력할 수 있는 함수는 PRINT_STRING이다 입력 파라미터로는 출력할 문자열이
시작되는 곳의 주소를 넣어주면 된다 출력할 문자열은 section .data에 바이트의 연속으로 선언하면 된다 
주의해야 하는 것은 문장 종료를 나타내는 0x00을 마지막에 추가해 주어야 문장의 끝을 인식한다  모든 어셈블러가
이런 방법으로 다루지는 않지만 SASM에서는 이 방식을 사용 
문법 형식은 다음과 같다
ex) PRINT_STRING para  (para : 출력할 곳의 주소, 문자열 종료는 0x00으로 표시가 되어야 한다 )
ex) msg db 'hello ' , 0x00
문자열에 캐리지 리턴(0xOD) 또는 라인 피드(0x0A)를 포함하면 PRINT_STRING
매크로 함수는 c처럼 output창의 줄을 변경하여 문자열을 출력해준다 
윈도우는 0x0D , 0x0A의 연속 문자를 유닉스는 0x0A만을 줄 변경을 수행할 수 있는데
SASM의 경우는 실행하는 운영체제에 따라 다른 반응을 해준다 그리고 NASM에서
문자열은'' 또는 ""을 사용해도 모두 허용된다 

어셈블러 프로그램에서 사용자로부터 키보드를 통해 입력을 받으려면 다양한 시스템
서비스를 받아야 한다 SASM의 환경에서는 오른쪽에 있는 input창에 숫자를 입력하면
두 수는 엔터로 다른줄에 표시되는데 미리 입력된 숫자는 프로그램에서 차례로 아래 함수로 입력받을 수 있다
GET_DEC para1, para2(키보드로 입력된 문자열을 10진수로 인식 , praa1 - 입력할 바이트 수 , papa2 - 입력받을 곳으로 레지스터 또는 메모리 주소)
GET_HEX para1, para2(키보드로 입력된 값은 16진수로 인식 , para1 -입력할 바이트 수 , para2 -입력받을 곳으로 레지스터 또는 메모리 주소)



</문자열>


<연산>
어셈블리에서 더하기는 가장 기본적인 연산이다 intel CPU에서 쓸 수 있는 더하기
명령어의 형식은 아래와 같다 
ADD para1, para2 (para1 = para1 + para2)
-para1 - 레지스터 또는 메모리에 있는 값
-para2 - 레지스터 , 메모리 값
- para1, para2모두 메모리인 경우는 허용되지 않는다
section .bss에서 선언한 데이터 크기는 사람을 위한 것이여서 CPU는 알지 못한다
빼기연산은 더하기 연산과 문법적 형태가 동일하다 
SUB para1, para2(para1 = para1 - para2)
para1 - 레지스터 또는 메모리에 있는 값
para2 - 레지스터, 메모리 ,값
para1과 para2모두 메모리인 경우는 허용되지 않는다

곱하기 연산은 규칙이 복잡하다 방법이 여러가지가 있는데 쉬운 방법은 다음과 같이 한다
MUL para(1byte인 경우)
para가 1byte일 때 AX= AL * para가 된다 (AX는 2byte)
para는 레지스터만 허용된다 , 곱해지는 값은 반드시 AL레지스터에만 넣어야 한다
연산결과는 반드시 AX레지스터로만 리턴된다 
만약 2*3을 연산한다고 하면 
2를 AL레지스터에 넣고 3을 BX레지스터에 넣고 mul bx를 호출한 다음 AX을 결과값으로 사용한다
실행하기 전에 AX레지스터도 0으로 초기화 해줘야 한다 

2byte와 4byte의 경우
MUL para(2byte)
-para가 2byte일 때 DX : AX = AX * para
-para는 레지스터만 허용된다
-연산결과는 무조건 지정된 레지스터로만 들어온다(DX:AX)

MUL para(4byte)
-para가 4byte일 때 EDX: EAX = EAX* para
-para는 레지스터만 허용된다
-연산결과는 무조건 지정된 레지스터로만 들어온다 

2byte, 4byte곱하기 연산에서 특정 레지스터를 사용해서 곱할 숫자를 설정하고 결과도 지정된 레지스터로만
받는다 이떄 상위 숫자는DX(2byte의 경우) 하위 숫자는 AX레지스터로 값이 들어온다 근데 이것을 연결해서
4byte로 해석해야 하는데 인텔 CPU에서는 이것을 물리적으로 연결해 한 번에 읽어주는 명령어가 없다 
그래서 논리 연산자를 이용해서 4byte로 연결을 해야한다 
(2byte의 경우)
DX값을 edx에 넣고 AX값을 eax에 넣는다 그다음에 DX에는 shl 16을 해서 왼쪽으로 숫자를 이동시키고
edx와 eax에 or연산자를 사용하면 된다
실제 곱하기에서는 DX레지스터까지 값이 안 가능 경우가 많지만 DX까지 사용하는 경우라면 버그가 발생할 수가 있다



나누기 연산도 곱하기 연산만큼 복잡한 구조를 가지고 있다 사용은 다음과 같이 한다
DIV para(1byte인 경우)
para가 1byte일때  AX / para : AL(몫) , AH(나머지)
para는 레지스터만 허용된다
나누어지는 값은 반드시 AX레지스터에만 넣어야 한다
연산결과는 무조건 AL, AH의 고정된 레지스터로만 리턴된다 
7/2를 수행한다고 하면  나누는 수인 2를 1byte크기로 결정하면 7은 2byte인
레지스터 AX에 넣고 수행한다 결과는 AL, AH로 들어온다 인텔 CPU에서 
내부 명령어를 구현할 떄 곱하기 나누기 회로 구성이 더하기 회로를 기반으로
하기 때문에 복잡하다

2byte이상 나누기 연산은 다음과 같이 한다 
DIV para(2byte)
-para가 2byte일때 DX:AX / para(2byte) (AX - 몫 , DX- 나머지)
-para는 레지스터만 허용된다
-나누어지는 값은 무조건 DX:AX레지스터에만 넣어야 한다(DX와 AX합친 값을 para로 나누는거임)
-결과는 AX, DX의 레지스터에서만 얻을 수 있다 
4byte의 숫자를 나누기ㅣ 위해 DX,AX레지스터로 분리한 후 계산을 해야 올바른 결과를 얻을 수 있다
4byte인 EAX를 바로 사용하는 것이 아닌 DX,AX구조를 사용한다 

eax를 DX:AX로 분리는 다음과 같이 한다
eax의 값을 edx에 복사한다 , edx에는 shr edx, 16연산을 , eax에는 and eax, 0x0000ffff연산을 수행한다 


데이터르르 왼쪽이나 오른쪽 방향으로 일정 비트만큼 이동시키는 것이 shift연산이다
인텔 CPU에서 지원하는 shift연산 중 가장 기본적인 것이 다음과 같다 
SHR para1 , para2(오른쪽으로 비트 이동)
-para1 : 작업할 장수(레지스터나 메모리)
-para2 : 오른쪽으로 이동할 비트 수(주로 4의 배수로 사용)

SHL para1, para2(왼쪽으로 비트 이동)
-para1 : 작업할 장소(레지스터나 메모리)
-para2 : 왼쪽으로 이동할 비트 수 (주로 4의 배수로 사용)
이동은 기본적으로 왼쪽과 오른쪽이 있고 대부분 4bit의 배수로 이동하기 때문에 4,8,16,32bit단위로 사용한다
이동 시 밀려가는 숫자는 버려지고 빈 숫자는 0으로 채워진다

1011 1011

0001001000110100 (0x1234) 여기서 
왼쪽으로 4bit 0010001101000000 (0x2340)
오른쪽으로 4bit  0000000100100011(0x0123)

논리연산의 대표적인 예로는 AND , OR , XOR , NOT이 있다 각각이 의미하는 바는 수학에서 사용하는
개념과 동일하다 
 AND, OR XOR para1 , para2( para1 = para1 연산 para2)
-para1,para2 : 연산대상으로 레지스터, 메모리 상수 모두 가능
-연산결과는 para1에 저장된다
-para1, para2 모두 메모리인 경우는 연산이 불가능하다 

NOT para(para = not para, 0은 1로 , 1은 0으로 변경)
-para : 연산대상으로 레지스터 메모리 , 상수 모두 가능
- 연산결과는 para에 저장된다 

CPU는 우리가 관심을 가지고 있는 상태를 모니터링 해주는 특별한 레지스터를 운영하는데
이 레지스터를 플래그 레지스터 또는 컨트롤 레지스터라고 한다 이 레지스터를 이용하면
연산들에서 특별할 일들, 예를들어 어떤 명령어 수행결과가 0이 되었는지 또는 캐리가 발생하였는지
등의 상태를 알 수 있다 대표적인 플래그 레지스터 2개는 다음과 같다
ZF(zero flag) : 연산 결과가 Zero면 설정됨
CF(carry flag) : 연산에서 캐리가 발생하면 설정됨
플래그 레지스터는 프로그램에서 특별히 다른 레지스터처럼 명시적으로 사용되지는 않고
각각의 플래그 상태 값을 이용하는 다른 명령어들에서 비 명시적으로 사용된다
플래그 레지스터의 값을 변경시키는 명령어들은 주로 산술 논리 연산자이다 
명령어중에서 TEST연산 명령어가 있는데 이 명령어는 구조는 AND연산과 동일한데
결과를 레지스터에 반영하지 않고 플래그 레지스터에만 반영한다
TEST para1, para2
-para1과 para2의 and연산을 행하고 결과를 플래그 레지스터에 반영한다 단 para1에는 연산 결과를 반영하지 않는다



실행파일을 만들고 콘솔에서 실행
1. 새로운 프로젝트를 시작하고 코드 추가
2. 메뉴 File > Save  .exe를 선택(Ctrl+Shift+E)하고 실행파일 이름 지정
3. 저장된 실행파일 폴더에서 명령창을 열어 해당 파일 실행 


SASM에서 실행코드 디버깅 및 레지스터 내용 보기
SASM은 한줄씩 실행하면서 문제점을 파악하는 디버깅 모드를 지원하는데
디버깅 전 알아야 하는 용어는 다음과 같다
-브레이크 포인트 : 실행 도중 멈춰야 하는 곳(F8)
- 브레이크 포인트 전까지 실행 : 멈춘 곳에서 다음 브레이크 포인트가 있는 곳 전 명령어까지만 실행(F5)
-step into : 서브 함수가 있다면 내부로 실행 흐름을 변경(F11)
-step over : 서브 함수 내부로 들어가지 않고 현재 명령어를 실행(F10)
-디버깅 종료: File > Debug > Stop
1. 새로운 프로젝트 시작 후 코딩 
2. 디버깅이 필요하다고 생각되는 부분쪽에 커서를 두고 F8키를 눌러 브레이크 포인트를 정한다
3. Debug > Debug 메뉴를 선택한다(F5)
4. step over(F10)을 사용해서 다음 내용으로 간다
5. Debug > show registers(Ctrl + R)을 선택해서 레지스터 내용을 확인한다 Hex에는
해당 레지스터에 들어있는 값의 16진수 표기이며 info는 10진수 표기법 값이다 많은 레지스터가
있지만 A,B,C,D를 중점적으로 보면 된다 
6. F5로 다음 브레이크 포인트로 바로 가기를 실행한다
7. Debug> Stop으로 디버그를 종료한다

</연산>


<조건문>
어셈블리를 새로 생성하면section .text가 자동으로 생성되는데 여기서 사용되는 라벨이라는 개념은 
실행명령어가 시작되는 곳의 주소를 의미한다 (CMAIN - 이것도 라벨)
라벨이 필요한 이유는 데이터 흐름이 순차적이 아닌
앞이나 뒤로 이동해야 하는 경우가 발생하는데 이때 JMP계얼의 명령어에서 사용하기 위해 필요하다 
형식은 라벨이름을 쓴 후 콜론으로 마무리 하면 된다 (라벨:) 라벨은 명령어가 시작되는 곳에
써도 좋고 빈칸을 만들어 써도 좋지만 가독성의 차이가 있을 뿐 주소값은 없다 
라벨은 다양한 문자를 사용할 수 있다

라벨을 사용할 때 유의사항은 다음과 같다
-한 프로그램 내에서 동일한 이름의 라벨을 2개 이상 정의하지 않느다
-필요에 따라서 동일한 주소에 여러 개의 라벨을 붙여 사용하는것이 가능하다 
CMAIN라벨은 운영체제가 프로그램을 시작할 주소를 지정해주는 약속된 라벨로 SASM에서는 다른것으로 변경하면 안된다
시작 라벨의 지정은 사용하는 어셈블러 및 링커에 따라 조금씩 다르다
라벨은 라벨 뒤의 명령어가 시작되는 주소값을 의미한다 

어셈블리 언어에서는 if문이 없다 if문은 더 저차원 레벨에서 구현해야 한다
if문을 구현하기 위해서는 먼저 CMP와 JMP계열 명령어를 이해해야 한다 
쉽게 사용할 수 있는 명령어는 다음과 같다 
CMP dst, src
-dst중심으로 src와 비교 연산을 수행한다
-연산 결과는 플래그 레지스터에 저장된다
-결과는 JMP명령문과 연결되어 사용된다 

JMP 계열 명령어 (플래그 레지스터의 플래그를 보고 수행됨)
-JE/JNE label : 같거나 / 같지 않다면 label로 jump(dst == src, dst != src)
-JG/JGE label : 크거나 / 크거나 같으면 labe로 jump(dst > src , dst >= src)
-JL/JLE label : 작거나/ 작거나 같으면 label로 jump(dst<src , dst <=src)
-JMP label : label로 무조건 jump
if문을 구현하기 위해 이 두개 명령어는 쌍으로 사용된다 
C와 어셈블리 언어는 참 거짓을 처리하는 블록의 위치가 정반대로 되어있다
C의 경우 참이면 바로 이어지는 블록에서 로직을 처리하는데 어셈블리에서는 JMP명령어를
사용해서 블록이 뒤쪽으로 가게된다 또한  거짓 블록이 끝났을 때 명시적으로 블록 탈출하는
명령을 사용하지 않으면 참인 블록이 실행될 수 있어서 주의해야한다 
어셈블리 언어는 로직 구현명령이 저차원이여서 동일한 로직을 다향한 표현법으로 표현이 가능해서
블록의 위치를 변경할 수도 있다


</조건문>


<반복문>
문법적으로는 EAX(4바이트)를 사용해야 하지만 어떤 경우는 AX(2바이트)를 사용해도 아무 문제가 발생하지 않는
경우가 많다 대부분의 경우는 값의 범위가 작아 초기화 될 때 상위 바이트가 모두 0으로 초기화 되었기 때문인데
이 경우 2byte로 다룰 수 있는 숫자는 총 65536개이다 만약 다루는 숫자의 범위가 이보다 크면
에러는 발생하지 않지만 인지하지 못하는 논리적 버그가 생기게 되어 원하는 결과를 얻지 못하게 된다
저 레벨의 언어일수록 문법 구조가 단순하고 데이터의 범위 체크는 프로그래머가 책임져야 하기 떄문에
다뤁는 데이터의 범위는 늘 신경써야한다 반대의 경우로 레지스터를 확장하면서 이전에 사용한 숫자 값들이
상위 레지스터에 남아있어 문제가 발생할 수도 있다 
예를들어 EAX크기로 데이터를 다루다가 2byte크기로 변환해야 하는 조건이 발생한다면 대부분의 경우는
AX레지스터만 읽으면 된다 그러나 상위 바이트에 의미 있는 데이터가 남아 있다면 손실이 불가피하다
ex) mov eax ,0x1234 mov bx, 0x5678   
add bx,eax -> 문법 오류 발생
add ebx, eax -> 문법 오류는 없지만 ebx의 상위 2 바이트에 값이 있다면 이상한 값이 나온다
add bx, ax -> 문법 오류는 없지만 만약 eax에서 상위 바이트에 의미있는 숫자가 있다면 값이 이상하게 나온다 

어셈블리 언어에서는 반복적인 작업을 위해 C언어 FOR처럼 복잡한 것은 지원하지 않는다
그러나 가장 기본적 반복기능은 사용할 수 있도록 별도의 명령어를 지원한다 인텔 CPU에서 지원되는 가장
기본적인 반복문은 다음과 같다
MOV ECX , 반복횟수
라벨 : 
<<반복되는 내용>>
LOOP 라벨
-반복 블록 내에서 ECX는 절대 사용하면 안된다
-LOOP라벨 명령어에 도착하면 ECX값을 1 감소시키고 만약 ECX값이 0이면 블록을 종료하고 그렇지 않으면 라벨에서부터 실행된다
ex) mov ax , 0 mov cx , 10
L1: add ax,cx loop L1  (0부터 10까지 숫자 더하는 반복)

어셈블리 언어에서 1 증가 또는 감소는 ADD,SUB등을 사용하여 구현할 수 있다 그러나 이것들에 비해 좀 더 간략하고
빠른 실행을 위해 별도의 명령어를 지원하고 있다
INC para
-para : 1더할 곳의 주소(레지스터, 메모리)
DEC para
-para : 1감소시킬 곳의 주소(레지스터, 메모리)

고급 언어에 있는 조건 무한 반복은 어셈블리 언어에서는 지원하지 않는다 대신 CMP와 JMP계열 명령어의 조합으로
얼마든지 만들어 낼 수 있다 사용은 불편하지만 자유도는 고급 언어에 비해 훨씬 높기 때문에 다양한 표현이 가능하다
ex) L1: add ax,bx inc bx  cmp bx,10  jle L1 (do while)
L1: cmp bx, 10 jg 2 add ax,bx inc bx jum L1(while)


ECX레지스터에 반복 횟수를 넣고 LOOP문으로 반복을 구현하는 문법 사용 시  유의해야 하는것이 있는데
반복 블록 내에서는 PRINT계열의 매크로 함수를 사용할 수 없다 PRINT계열의 매크로 함수 내에서 사용하는
라벨의 범위와 LOOP명령어에서 사용하는 라벨의 범위가 충돌하기 때문이다 따라서 jmp와 cmp를 이용해서 
반복을 구현해야 한다 


</반복문>



<배열>
어셈블리 언어에서 배열의 선언은 초기화된 배열과 초기화되지 않은 배열로 나누어 생각할 수 있다
초기값이 있는 배열 선언
-section .data에서 선언
-<변수이름> <데이터타입> <배열 개수만큼의 값>(초기값을 여러개를 설정 가능)
ex) a db 30, 50, 20,70,60
-<변수이름> TIMES <변수개수> < 데이터타입> <초기값>(초기값은 모두 같은걸로 사용할떄 좋음)
ex) b times 5 db 0
초기값이 없는 배열 선언
-section .bss에서 선언
-<변수이름> <예약데이터 타입> <배열개수> (명시적인 초기화가 없지만 일반적으로 0으로 초기화되는 경향이 있다)
ex) c resb 3

배열을 선언하면 메모리에 데이터타입 크기 단위로 메모리가 설정된다
레지스터로 주소값을 다룰때는 4byte단위로 다루어야 한다(AX에 값을 설정해도 EAX값이 변한다)

어셈블리 언어에서 변수 명칭은 주소를 [변수]는 변수가 가리키는 곳의 값을 의미한다
C언어에서 배열 변수는 데이터의 타입에 상관없이 인덱스로 접근할 수 있지만 어셈블리는 무조건 1byte단위로 접근한다
그래서 배열 변수 데이터 타입이 1byte인 경우는 C언어처럼 사용하면 되지만 2byte인 경우는 주소를 직접
계산하면서 사용해야한다 

인덱스로 배열 요소에 접근할 때 주의점
-반드시 메모리값으로 접근한다
-접근 주소 = 시작주소(변수이름 또는 시작 주소를 가지고 있는 4byte레지스터 이름) + 배열인덱스 * 데이터타입 바이트 크기
ex) a dw 0x1234, 0x5678로 선언한 데이터에 접근할때 mov ax, [al] 이렇게 하면 ax에는 0x1234값이 들어가고
mov ax, [al + 1* 2]을 하면 0x5678값이 들어간다 만약 mov ax, [al + 1] 이렇게 하면 0x7812가 들어가는데 이거는
al의 메모리 구조를 보면
0x1234를 먼저 넣었으니까 앞 2byte는 3412  뒤에 0x5678을 넣어서 뒤 두 바이트는 7856이렇게 메모리로 들어가서
34 12 78 56 순서로 메모리에 값이 들어가게 된다  그런데 al주소에서 1byte를 더한 주소에서 2byte만큼 값을 얻으니까
ax에는 12 78의 값이 들어가고 출력하면 7812가 출력되게 된다 
주소를 계산하는[]속에 포함된는 레지스터는 무조건 4byte레지스터야 한다 4byte가 아니면 에러가 발생한다 





</배열>


<프로시저>
어셈블리는 동일한 로직을 구현하는데 고급 언어에 비해 많은 수의 명령어들이 필요하다 코드가 길어지면 사용하기 불편하기 떄문에
관련된 알고리즘들을 별도의 모듈(블록)으로 묶어 두고 필요할 때 반복해서 사용하는 프로그래밍 기법이 생기게 되었다 
모듈 프로그래밍 기법의 중요한 목적은 가독성과 재활용이다 어셈블리에서 복잡한 로직을 체계적으로 관리하기위해
반드시 모듈 프로그래밍을 활용해야한다
어셈블리에서 모듈은 프로시저(procedure)또는 서브루틴(subroutine)이라고 부르며 아래와 같이 사용한다
-프로시저 선언
프로시저 이름:
.....
ret
프로시저 사용
CALL 프로시저 이름

프로시저 선언은 section .text에서 선언하고 section .text.내에서 호출(CALL)한다 프로시저가 끄탄는
부분은 항상 ret명령어를 사용하는데 이것은 명령어의 흐름을 CALL했던 다음 라인으로 보내는
일종의 JMP문으로 생각하면된다 프로시저 내에서 또 다른 프로시저를 호출할 수 있으며
자신을 다시 호출할 수도 있다 프로시저의 이름은 단순하게 보면 메모리의 특정 주소를 의미한다

고급 언어들은 존재하는 모듈들을 다양한 이름으로부른다 C언어는 함수라고 불리는데 함수의 경우는
해당 함수를 수행하기 위해 입력 값과 함수 출력 결과를 얻어야 하는 경우가 많다 이러한 기능은
어셈블리에서는 레지스터를 통해 구현할 수 있다 그리고 레지스터를 이용하기 때문에 
리턴 값의 개수를 자유롭게 설정할 수 있다 프로시저를 사용할 때 유의해야 하느것은 다음과 같다
-section .data, section .bss등에 있는 변수들은 모든 프로시저에서 접근이 가능하며 공유된다
-라벨의 이름은 모든 프로시저에서 인식되는 전역 범위이기 때문에 동일한 이름의 라벨이 2개 이상의
프로시저 내에서 존재할 수 없다 

프로시저 디버깅은 기본 디버깅과 방식이 동일한데 다만 CMAIN프로시저에서 모듈을 CALL할 떄 
모듈 내부로 진입해서 로직을 살펴보고 싶을 떄는 STEP INTO(F11)기능을 사용하고 결과 값만을
얻고 싶으면 STEP OvER(F10)을 사용하면된다 




CPU는 여러 종류의 자신의 전용 메모리인 레지스터를 사용한다 자주 사용하는 A,B,C,D등의 레지스터는
데이터 레지스터 또는 범용 레지스터라고 전통적으로 부른다 이런 레지스터와 함께
알아야 하는 중요한 레지스터가 포인터 레지스터이다 대표적인 레지스터는 다음과 같다
Instruction Pointer(IP)
- 다음에 수행한 명령어가 있는 곳의 주소값을 저장
-CPU가 관리
Stack Pointer(SP)
-현재 스택의 TOp값의 주소를 저장
-주로 CPU가 관리하고 프로그래머가 변경하는 경우도 있다
Base Pointer(BP)
-프로그래머가 계산 중 주소를 저장하기 위한 용도)
-프로시저의 파라미터 접근 등에 사용됨

CPU는 연산의 편리를 위해 스택이라는 자료 구조를 물리적으로 운영한다 이 스택은 실행되는 프로그램마다
1개를 가지고 있으며 물리적으로는 실행되는 프로그램의 특정 메모리 영역에 예약되어 사용되는 자료구조다
자료구조 스택과 동일한 개념으로 먼저 넣은 자료가 나중에 나오는 구조(Last in first out)이다 스택에
자룔르 넣고 뺴는 문법 구조는 아래와 같다 

64bit어셈블러 모드에서 
스택에 자료넣기
-PUSH para : para를 넣고자 하는 자료값으로 2byte또는 8byte크기 상수값 또는 레지스터 
-para가 상수인 경우는 크기를 명시적으로 표시(push word 0sx12 , push qword 0x1234)

스택에서 자료 빼기
-POP para : para는 저장된 자료를 받을 곳 2byte또는 8byte 크기의 레지스터 또는 메모리
-para가 메모리인 경우는 크기를 명시해야함(pop word [a] , pop qword[b])

32bit어셈블러 모드에서 
스택에 자료넣기
-PUSH para : para는 넣고자 하는 자료값으로 2byte또는 4byte크기 상수값 또는 레지스터
-para가 상수인 경우는 크기를 명시적으로 표시(push word 0x12 , push dword 0x1234)

스택에서 자료 뺴기 
-POP para : para는 저장된 자료를 받을 곳 2byte또는 4byte크기의 레지스터 또는 메모리 	
-para가 메모리인 경우는 크기를 명시해야함(pop word [a] , pop dword[b]

스택은 메모리 영역에서 미리 예약되어 있는 일정한 크기의 특별한 배열 변수라고 생각하면 된다
이 배열은 마지막 인덱스부터 앞으로 오면서(주소의 높은 쪽에서 낮은 쪽으로) 사용한다 
PUSH 연산은 뒤쪽에서 앞쪽으로(높은 주소에서 낮은 주소)이루어지고 POP은 그 반대방향으로 연산이 진행된다
또 요소 크기의  기본 단위는 64bit인 경우는 2byte또는 8byte고 32bit모드일 때는 2byte또는 4byte이다
그리고 현재 어떤 인덱스 까지 작업했는지를 기억하기 위해 특별한 레지스터를 사용하는데 이 레지스터가
RSP(stack pointer)레지스터이다 PUSH연산을 수행하면 RSP값은 데이터 크기만큼 감소하고 POP을 수행하면
데이터 크기만큼 증가한다 

일반적으로 프로그램에서 직접 RSP레지스터를 조작하거나 스택의 메모리를 직접 조작해야 하는 경우는 별로 없다
대부분은 PUSH와 POP연산을 이용해서 명시적으로 스택을 사용한다 
RSP레지스터와 스택의 메모리값을 직접 조작하는데에 관심이 많은 사람들은 해커들이다 스택의 값들이
잘못 변경되면 주소가 꼬여서 엉뚱한 내용이 실행되거나 프로그램이 정지해 버리는 결과를 경험할 수 있다

스택의 대표적 사용용도는 다음과 같다
프로그래머가 임시로 로컬 저장소가 필요할 때 사용
프로그램이 자체적으로 프로시저를 사용할 때 돌아갈 주소를 잠시 저장하기 위해 사용한다
스택을 사용할떄 주의해야 할 점은 PUSH한 횟수와 POP한 횟수를 일치시켜야한다 

스택을 통한 파라미터 전달은 먼저 스택에 파라미터를 PUSH하고 서브 프로시저를 호출한다
서브 프로시저에서는 약속된 규약에 따라 스택에서 파라미터를 꺼내 사용한다 이때 파라미터를
프로시저 내부에서 사용하는 방법은 POP연산을 사용하거나 스택 포인터를 이용하여 직접 정보에 접근하는
방법이 있다 그리고 이러한 방법에 따라 프로시저 호출이 끝난 후 스택 포인터를 수동으로 조정하는 경우도
발생한다 이러한 파라미터 전달과 결과를 반환하는 서브 프로시저 운영 방식을 호출 규약이라고 하고
언어마다 방법이 다르다 
어셈블리에서 프로시저를 호출 할 때 CPU가 다음 라인의 주소를 스택에 저장한 후 RSP를 자동으로 증가시킨다 
그리고 프로시저가 끝날 때 자동으로 저장된 값이 POP된다 
C의 경우는 파라미터에 접근하기 위해 POP을 사용하지 않고 스택 포인터를 이용하여 파라미터에 직접
접근하는 방법을 사용한다 이러한 방법은 프로시저를 호출한 후 프로그래머가 직접 스택의 포인터를
조절하는 작업이 추가로 필요하다 

프로시저를 사용하려면 복잡한 것들이 많다 특히 파라미터를 전달하고 값을 리턴하는 부분에서 고급
언어들의 사용방법이 그렇다 이에 어셈블리에서도 C함수처럼 편안하게 프로시저를 사용하는방법을
제공하는데 이 방법이 매크로 기법이다 매크로는 고급언어에서 보면 일종의 전처리로 매크로 함수를
호출하면 실제로 어셈블 되기 전에 어셈블리 언어 수준으로 코드 레벨에서 변경된 후 어셈블이 진행된다 
프로그래머 입장에서는 로직을 낮은 레벨에서 반복적으로 구사하지 않아도 되기 때문에 훨신 편리하다 
이런 관점에서 매크로는 어셈블리 언어를 자신만의 새로운 언어로 확장할 수 있는 강력한 도구라고 할 수 있다
극단적인 매크로 함수의 사용 예는 매크로를 너무 많이 발전시켜 어셈블리 프로그래밍인데 낮은
레벨의 어셈블리 언어를 하나도 사용하지 않는 것들도 있다 


매크로 함수 선언은 다음과 같이 한다 
%macro <함수이름> <파라미터 개수>
 ...
$endmacro

매크로 파라미터 사용은 다음과 같이 한다 
- %1 : 첫 번쨰 파라미터
- %2 : 두 번쨰 파라미터ㅊ
...

매크로 함수 사용
-매크로 함수 이름 para1, para2 , para3

매크로 함수를 별도 파일에 정의하고 사용하기
- %include "파일이름"

매크로 함수의 코딩상의 위치는 일반적으로 가장 위쪽에 위치시키며 이런 함수가 많아지면 함수를 묶어서 
별도의 파일에 두고 %include "파일 이름"으로 메인 코드에 포함시켜 사용하기도 한다 


어셈블리 언어에서 상수는 프로그램 코드 내에서 늘 일정한 값을 갖는 일종의 매크로로 볼 수 있다
의미있는 이름을 사용하지만 실제 어셈블 될 때는 정의된 상수로 변경되어 진행된다 
NASM에서 많이 사용하는 상수 선언은 다음과 같다
equ 숫자 상수선언 
- <상수이름> equ 정의값
-도중 변경 불가능

%assign 숫자 상수선언
-%assign <상수이름> <정의값>
-도중에 값을 변경하는 재 선언이 가능 

%define 숫자 또는 문자열 상수 선언
-%define <상수이름> <정의값>
-도중에 값을 변경하는 재  선언이 가능 

문자열의 길이를 구하는 것이 가끔 필요한데 수동으로 카운팅하는것은 매우 불편하다 NASM에서는
문자열의 길이를 계산할 수 있는 매크로를 지원한다 사용은 다음과 같이 한다 

문자열 길이 자동 계산 매크로
길이정의상수 equ $ - <문자열 변수이름>
ex) msg1 db 'haha',0x00   msg1_len equ $ - msg1
문자열의 길이는 C언어처럼 0x00으로 끝나는 것을 의미하지 않고 $심벌이 시작하는 주소에서 문자열이
시작하는 주소를 뺀 값으로 계산하고 있다 PRINT_STRING매크로 함수는 변수의 시작 주소에서 
0x00을 만날 때까지를 문자열로 간주하도록 C스타일로 설계되어있다 
</프로시저>
 

<ms윈도우 명령창 개발>
SASM의 GUI환경없이 어셈블리 언어를 프로그래밍 하기 위해서는 nasm.exe(어셈블러)와 gcc.exe(링커가 필요하다)
통상 이런 환경은 명령창 환경으로 구성한다 명령창 환경은 불편하지만 상대적으로 강력한 개발이 가능하다
SASM을 설치하면 두 환경을 모두 설치하는데 SASM에 포함된 gcc.exe는 문제가 있어서 새롭게 설치를 해야한다

1.mingw-w64 다운로드 받고 설치  
구글에서 mingw-w64를 검색하면 https://sourceforege.net/projects/mingw-w64/ 에서 설치파일을 받을 수 있다
옵션은 기본으로 진행하고 경로는 기억해두는 것이 좋다 
2.개발환경 스크립트 만들기
mingw-w64가 설치된 폴더에 들어가면 mingw-w64.bat파일이 있는데 이 파일을 바탕화면에 복사해 와서
에디터로 열고 nasm.exe파일의 경로를 path에 추가한다(3라인) 6라인을 불필요해서 rem을 써서 주석처리하면된다
이후 이 파일을 자신이 작업하는 폴더로 복사 후 마우스로 더블클릭하면 명령창 작업 환경이 열린다 이 환경에서는
nasm.exe , gcc.exe를 바로 호출하여 사용할 수 있다 

SASM환경은 io.inc/io64.inc매크로 함수들의 도움으로 입출력을 수행했다 만약 이러한 매크로 함수의 도움을 받지 않고
코딩한다면 CMAIN이 _main으로 변경되어야 하고 section이라는 지시어 대신 segment를 사용하여도 된다 

명령창 환경에서 어셈블리 소스를 가지고 실행파일을 만드는 방법은 다음과 같다 소스파일은 어셈블러에 의해
중간파일로 만들어지고 이 중간파일을 이용해서 링커는 최종 실행파일을 만든다
어셈블 (중간파일 만들기)
- nasm.exe -g -f win32 <소스이름> -o <중간파일 이름> (32비트 모드일때)
- nasm.exe -g -f win64 <소스이름> -o <중간파일 이름> (64비트 모드일때)

링킹(실행파일 만들기)
-gcc.exe <중간파일 이름> -g -o <실행파일 이름> -m32 (32비트 모드일때)
-gcc.exe <중간파일 이름> -g -o <실행파일 이름> -m64 (64비트 모드일때)

옵션
-g : 디버깅 정보 포함   , -f  출력파일 포맷   -o 출력파일 이름

NASM에서 2개 이상의 모듈을 사용하여 어셈블리 프로그래밍을 해야 하는 경우 사용 원리는 간단하다
동일한 모듈 내부에 있는 프로시저는 특별한 조치 없이 사용이 가능하다 만약 다른 모듈에 있는 프로시저를 사용하고
싶으면 아래와 같은 설정이 필요하다 

프로시저 서비스를 제공하는 모듈
프로시저를 코딩한 후 모듈 제일 위쪽에 global지시어를 이용해서 프로시저의 오비ㅜ 사용을 위한 공개(public)를 선언한다
ex) my.asm에서 global my add, global mysub 프로시저

프로시저 서비스를 사용하려고 하는 모듈
모듈의 제일 위쪽에 extern지시어를 사용해서 서비스 받으려고 하는 프로시저의 이름에 외부 모듈 어딘가에 있다는 것을 선언한다
ex) test.asm에서 extern myadd선언

NASM에서 다중 모듈 실행파일을 만드는 방법은 먼저 각각의 모듈을 어셈블해서 중간파일을 만들고 링커를 이용하여 모든
중간파일을 합쳐서 1개의 실행파일을 만든다

ex) t1.asm(메인모듈), t2.asm(서브 모듈을 이용하여 )t1이라는 실행파일을 만드는 경우
1. t1.asm , t2.asm코딩
2. t1.asm-> t1.obj 중간파일 만들기 (nasm.exe -g -f win32 t1.asm -o t1.obj)
3. t2.asm-> t2.obj 중간파일 만들기( nasm.exe -g -f win32 t2.asm -o t2.obj)
4. t1.obj t2.obj -> t1 실행파일 만들기 (gcc t1.obj t2.obj -g -o t1 m32)

명령창 개발 환경에서 io.inc/io64,inc
io.inc/io64.inc 파일은 SASM이 설치된 폴더의 include서브 폴더에서 찾을 수 있다 이 파일에 대한 실제 구현
중간파일은 SASM서브 폴더인 NASM폴더에 macro.o(32bit) , macro64.o파일로 존재한다
여기에 있는 io.inc/io64.inc 파일과macro.o /macro64.o파일을 작업폴더로 복사하면 준비가 끝난다 이후
자신의 코드에 %include "io.inc"를 포함하고 필요한 함수(ex PRINT_DEC등)을 사용하여 코딩한다
어셈블은 특벌한 옵션이 없으며 링킹 시에 macro.o 또는 macro64.o파일을 추가하면된다
macro.o파일은 io.inc파일의 본체 파일을 어셈블하여 중간파일로 만들어둔 것이다 io.inc에는 선언만
있고 내용이 없는 프러시저들이 있는데 macro.o중간파일에 있기 때문이다
io.inc파일을 사용하는 경우 반드시 링킹 시에 macro.o파일을 같이 링킹해야 한다 

include사용하여 개발하는 경우
소스코드 코딩
-%include "io.inc"또는 %include "io64.inc" 포함
-시작함수는 CMAIN또는 main모두 사용 가능
-PRINT_DEC등 함수 사용

어셈블(중간파일 만들기)
-nasm.exe -g -f win32 test.asm -o test.obj (32비트)
-nasm.exe -g -f win64 test.asm -o test.obj(64비트)

링킹(실행파일 만들기)
-gcc.exe test.obj macro.o -g -o test -m32(32비트)
-gcc.exe test.obj macro.o -g -o test -m64(64비트)

어셈블리어에서 C의 표준 라이브러리 함수 사용
C의 함수들은 중간파일 형태로 구현되어있어 C로 만들 프로그램을 컴파일 할때 링킹이 일어나게 된다
따라서 이러한 C의 라이브러리 파일은 어셈블리언어에서도 사용이 가능하다 SASM환경에서 C의 라이브러리
파일은 SASM이 설치된 폴더 MinGW(32bit)라는 서브폴더에 존재한다 
어셈블리에서 C의 printf함수를 사용하려면 아래와 같이 하면된다
32bit기준
소드 코드 코등
-extern _printf (외부 함수 존재 선언 , 함수 이름 앞에 _를 반드시 붙여야 한다)
-push parameter (함수 파라미터 설정)
-call _printf (함수호출)
-add esp , 파라미터 크기( 스택 복구)
어셈블(중간파일 만들기)
-nasm.exe -g -f win32 t1.asm -o t1.obj
링킹(실행파일 만들기)
-gcc.exe t1.obj -g -o t1 -m32
-묵시적 링킹 : 별도의 중간파일명을 명기하지 않아도 gcc가 자동으로 링킹 

C라이브러리를 사용하여 링킹을 수행할 때는 프로그래머가 C의 중간파일명을 수동으로 알려주지 않고
gcc설치 시 설정된 환경에 따라 gcc.exe가 묵시적으로 필요한 요소들을 링크한다 중간파일의
확장자는 무엇이든 상관이 없지만 일반적으로 많이 사용하는 확장자는 obj.o.a.lib등이 있다

스택은 높은 주소에서 낮은 주소로 성장해서 스택을 사용하면 뺼셈 연산이 일어나고 스택을 복원하면
주소의 덧셈 연산이 일어난다 C의 파라미터 호출 방법은 스택에 파라미터 데이터를 넣고
함수에서 이것을 사용한다 C함수 내부에서 파라미터를 이용하기는 하지만 스택 복원은 관여하지 않기
때문에 호출한 쪽에서 스택을 복구해야한다 	


C소스로 실행파일 만들기
C로 만들어진 소스의 중간파일 생성은 컴파일러(gcc.exe)가 수행하고 중간파일을 실행파일로 만드는 것도 링커(gcc.exe)가 수행한다

컴파일(중간파일 만들기)
-gcc.exe -c <소스파일 이름> -m32(32bit일떄) ex) gcc -c t1.c -m32
-<소스파일 이름>.o로 중간파일이 만들어진다

링킹(실행파일 만들기)
-gcc.exe <중간파일> -o <실행파일> -m32(32bit일때)  ex) gcc t1.o -o t1 -m32
-C의 표준 함수들의 중간파일들은 묵시적으로 링킹된다 

어떤 로직은 어셈블리 언어로 구현하기에는 너무 복잡하고 코딩량이 많은 경우가 있다 이런 이유때문에
C같은 고급 언어가 등장하였고 고급 언어로 만들어진 로직을 어셈블리 언어에서 사용이 가능하다 

C에서 함수의 리턴 값인 EAX레지스터 값에 저장된다 따라서 어셈블리 언어에서 리턴 값은 EAX로 읽으면 된다
32bit모드 실행파일에서 C의 int는 4byte로 처리된다
파라미터는 스택으로 저달되며 C언어의 함수 호출에서 뒤쪽에 나오는 파라미터부터 스택에 전달된다



</ms윈도우 명령창 개발>


<커널>
CPU, 메모리 , 디스크 등은 컴퓨터 자원으로 분류되며 프로그램들은 이러한 자원을 사용하여 임무를 수행한다 이러한 자원을 우리가 만든
프로그램에서 직접 관리하면 많은 성가심이 발생한다 자원을 효율적으로 관리하는 프로그램을 실행시켜놓고 필요할 떄 서비스를 요청해서
받을 수 있다면 본래 목적에 집중 할 수 있는데 이렇게 자원을 관리하면서 다른 프로그램 서비스를 해주는 프로그램을 운영체제라고 한다
응용 프로그램에게 해주는 운영체제의 서비스는 함수 형태로 제공되며 이 서비스 함수를 리눅스 계열에서는 시스템 콜, ms윈도우 계열에서는
API라고 부른다 

운영체제의 서비스 함수를 이용하기 위ㅏ해서는 해당 운영체제에 어떠한 서비스가 있는지 함수 사용 시 파라미터는 어떤 값을
넘겨주어야 하는지에 대한 정확한 지식이 있어야 이용이 가능하다 운영체제 서비스 함수의 종류는 작게는 수십 많게는 수백에
다르며 해당 운영체제에 따라 다양하다 

App1 App2
----------
API function 
--------------
OS(Kernel)
---------------
디바이스 드라이
--------
하드웨어



MS윈도우 계열의 함수는 요구하는 파라미터 수가 많아 어렵기 때문에 대부분 C언어를 사용하여 이러한 API서비스를 이용한다
이런 커널 서비스 함수들은 원칙적으로는 해당 운영체제에서 실행파일을 만들 수 있는 모든 언어에서 사용이 가능하며
언어에 따라 문법적 형태는 다르지만 함수이름, 파라미터 수는 변함없이 동일하다 윈도우에서 이런 커널 서비스를 사용하는
프로그래밍 분야를 API프로그래밍 또는 윈도우 시스템 프로그래밍이라고 한다 

어셈블리 프로그램에서 커널 서비스를 이용하여 프로그램할 떄 동일한 프로그램이 어떤 운영체제 환경에서는 정상으로 실행파일이 만들어지지만
또 다른 환경에서는 문제가 발생하기도 한다 이는 각가의 운영체제 서비스 함수들이 다르기 때문에 발생하는 문제이다 
요즘 개발툴들은 어떤 운영체제에서 개발툴이 실행되든 만드는 프로그램에서 실행될 운영체제를 지정하면 다른운영체제에서도 실행파일을
만들 수 있다 하지만 실행환경이 다르면 실행은 불가능하다

윈도우 운영체제에서 실행 코드들은 여러 개의 물리적 파일로 분산되어 구성되어 있다 그 중 시각적 처리와 관련된 부분은
주로 user32,dll에 구현되어있고 파일 입출력 등은 kernel32.dll에 구현되어 있다 이외에도 gid32.dll등 여러 파일들이 있다
어셈블리 언어에서 윈도우의 커널 서비스 함수를 이용하기 위해서는 해당 서비스가 어떤 파일에 포함되어 있는지 알아야 원활하게
이용이 가능하다 

C함수를 어셈블리 입장에서 사용하려면 함수에서 필요한 파라미터를 스택에 저장한 후 서비스를 호출하고 서비스가 종료되면
파라미터를 위해 사용했던 스택을 어셈블리에서 소거해주어야 한다 이런 방법을
__cdecl이라고 부른다 그리고 이 방식은 파라미터의 가장 처음 값이 스택의 가장 앞쪽에 들어오는 방식을 취한다 (스택은 높은 주소부터 시작하여 낮은 주소로)

이와 다르게 윈도우 커널 서비스 함수를 설계했던 개발자들은 다른 호출 규약을 선택하였다 어셈블리 언어에서 필요한 파라미터를
스택에 적재해두면 API함수 내부에서 스택을 알아서 정리해 준다 따라서 어셈블리 언어 입장에서는 C함수와는 달리 뒤처리를
할 필요가 없다 파라미터를 전달하는 순서는 첫 번쨰 파라미터가 스택의 가장 앞쪽에 오는 C방법과 동일하다 
이러한 윈도위 API함수 파라미터 전달 방법을 __stdcall이라고 부르고 윈도우즈에서는 WINAPI로 재정의되어 사용된다 

어셈블리에서 __cdecl방식을 사용하여 프로시저 호출은 다음과 같이 한다
파라미터 push 
call 프로시저 
push ebp 
....
pop ebp
ret
돌아 온 후 add ebp , 8(파라미터 바이트 크기 합)

어셈블리에서 __stdcall방식을 사용하여 프로시저 호출은 다음과 같이 한다
파라미터 push
call 프로시저
push ebp
....
pop ebp
ret 8(파라미터 바이트 합)
스택 복구를 프로시저에서 하냐 호출부분에서 하냐의 차이가 있다


링커는 어셈블러가 만들어 놓은 중간파일을 서로 모아 동일한 section으로 통합하면서 상대적 주소를 다시 계산하여 실행에 문제가 없도록
하는 역할을 한다 서로 다른 2개 이상의 중간파일을 합치기 위해서는 어셈블러가 만들어 놓은 중간파일의 형식을 인식할 수 있어야
주소 재배치가 가능하다 따라서 링커의 종류에 따라 특정 어셈블러가 만들어 놓은 중간파일을 인식하지 못하는 경우도 있다

t1.obj       t1.exe     t2.obj
.text -------->    <-----.test
.data------->     <------.data
.bss--------->   <-------------.bss

어셈블러는 대부분 특정 OS에 적합하도록 제작되고 또 이 어셈블러와 가장 잘 협력할 수 있는 전용 링커도 있다 MS윈도우의 경우는
ms에서 만든 MASM어셈블러와 ml.exe링커를 주로 사용한다 사용하는 CPU, 운영체제 어셈블러가 동일하다고 해도
그 어셈블러가 협력하는 링커가 무엇인가에 따라 어셈블리 코드의 문법적 차이가 발생할 수 있다 이런 이유로 어셈블러는
자신이 특별히 선호하는 링커가 있다 그러나 어셈블러가 서로 다른 링커를 지원해야 한다면 각 링커의 특성을 반영할 수 있는 확장성을
가지고 있어야 하며 같이 작업하는 링커의 고유 문법을 준수해야 한다 

멀티 OS시대이기 떄문에 다중 플랫폼에서 동작하는 어셈블러들이 필요하다 NASM이 대표적인 다중 플랫폼을 지원하는 어셈블러이다
GCC는 내부적으로 ld.exe라는 링커를 사용하고 있다 윈도우 API함수를 사용하는 소스를 NASM로 오셈블하고 GCC링커를 사용하여
실행파일을 만드는 것은 가능한데 조합이 좋지 않아 윈도우 API함수와 작업할 수 있는 golink.exe를 사용하는 것이 좋다


golink다운받기
1. 인터넷에서 GOLINK를 다운받는다(www.godevtool.com)
2. 다운로드 받은 파일을 사용할 폴더에 압축을 푼다 
3. 콘솔 개발 환경 설정 파일(mingw-w64.bat)에 golink의 PATH를 추가한다 


실행 프로그램이 윈도우 창을 가지고 있는 윈도우 전용 프로그램을 만들기 위해서는 마이크로소프트가 지정해 둔 코딩
구조를 가져야 하지만 커널 서비스 함수를 사용하는것이 목적이라 기존 구조로 프로그램을 만든다

golink는 링킹 때 시작 함수 이름을 명기해 줄 수 있기 떄문에 어떤 이름을 사용해도 상관없다
링크 명령의 형식은 아래와 같다
golink 링크 명령
-golink/entry <시작 함수이름> /fo <실행파일 이름> <중간파일 이름> <외부모듈 이름>

코드에서 윈도우 커널 서비스 중 하나인 MessageBox함수를 사용하려면 먼저 해당 함수의 정의를 보아야 한다 이 함수의 정의는 google에서
함수 이름과 MSDN이란 단어를 같이 검색하면 쉽게 찾을 수 있다 MSDN은 (MicroSoft Developer NEwwork)로 
윈도우 운영체제를 대상으로 개발하는 개발자를 위한 자료가 있다

MessageBOx함수의 파라미터는 
첫 번쨰 파라미터는 부모 윈도우의 핸들 값이며 부모가 없고 자신이 시작이면 NULL을 의미하는 0x0을 넣으면 된다
두 번째 파라미터 ipText는 메시지 내용이 있는 문자열의 주소 값이다
세 번째 파라미터 lpCaption은 메시지 박스 타이틀 바에 출력되는 문자열이 있는 곳의 주소 값이다 
네 번째 파라미터는 메시지 박스에 출력되는 아이콘 및 버튼의 유형을 정의하는 값이다 
그리고 이 함수는 실제로는 MessageBoxA와 MessageBoxW로 선언되고 구현되어 있는데 문자열을 ANSI로 다루는지 유니코드로 다루는지
차이가 있다  함수는 user32.lib파일에 있으며 실제 코드는 커널의 user32.dll모듈에 구현되어 있다 일반적으로 이 함수를 사용하려면
소스에서 함수 사용 후 링크 시 user32.lib을 링크하고 실행시에 user32.dll파일을 사용하면 된다 그러나 golink는 링크 시에도 
user32.dll에서 정보를 찾아오기 떄문에 user32.lib파일을 사용하지 않아도 된다 

윈도우 시스템 API함수는 파라미터 전달방식이 __stdcall방법이여서 스택 복원은 따로 처리할 필요가 없다

실행파일을 만들기 위해서 링크 시에 user32.dll파일을 입력 파라미터로 사용하면 무난하게 실행 파일을 만들 수 있다
user32.lib를 사용하는 경우는 소스 폴더에 별도로 user32.lib파일이 포함되어 있어야 하지만 user32.dll 파일을 사용하는 경우는
소스 폴더에 이 파일이 있을 필요는 없다  user32.dll파일은 시스템 커널 파일이기 떄문에 시스템 폴더에 이미 위치해있고 링커도
이를 알고있다 golink와는 다르게 다른 대부분 링커는 user32.lib파일을 링크 시 명시적으로 사용한다
golink 링크 명령
-golink /entry <시작 함수이름> /fo <실행파일 이름> <중간파일 이름> < 외부모듈 이름>
ex) golink /entry start /fo t2.exe t2.obj user32.dll


윈도우 커널 레벨에서 파일 입출력 관련 함수로는 CreateFile(), WriteFile(), ReadFile(), CloseHandle()등이 주로 사용된다
윈도우에서 파일을 다루기 위해서는 먼저 해당 파일을 생성해야 하는데 이때 CreateFile()함수를 사용한다 생성된 파일은
WriteFile(), ReadFile()등을 사용해서 작업을 수행할 수 있다 작업이 종료되면 CLoseHandle()함수로 생성된 파일을
닫아주면 마무리된다 CreateFile() 함수는 작업 용도에 따라 새로 파일을 만들기도 하고 이미 만들어져 있는 파일을 사용하기도 한다 

CreateFile()API 정의는 아래와 같다
HANDLE WINAPI CreateFile
-IpFileName : 작업할 파일의 이름이 값이 된다
-dwDesiredAccess : 파일을 어떤 용도로 생성하는가에 대한 옵션이다
-dwSharteMode : 공유 여부인데 -0x00은 공유하지 않음을 의미한다
-IpSecureityAttributes : 보안설정 항목으로 기본은 NULL(0x00)이다
-dwCreationDisposition : 생성 시 옵션이다
-dwFlagsAndAttrributes :작업파일의 속성값을 의미한다
-hTemplateFile : 템플릿 사용여부를 의미하며 보통은 NULL로 사용하지 않음을 설정한다 
명칭은 CreateFileW, CreateFileA로 나누어 사용되며 kernel32.dll에 구현되어 있다 리턴값은 파일의 핸들 값이며 에러가 발생하며
에러 발생 사실을 알린다 


WriteFile API함수는 CreateFile에서 리턴 받은 파일 핸들을 이용하여 해당 파일에 데이터를 쓰는 함수이다


</커널>



<리눅스>


SASM의 GUI환경없이 어셈블리 프로그래밍을 하기 위해서는 NASM(어셈블러)(와 GCC(링커) 실행 환경이 필요하다 통상
이런 환경은 명령창 환경으로 구성한다 

NASM설치
sudo apt-get update
sudo apt-get -f install
sudo apt-get install nasm
sudo pat-get install gcc-multilib

sudo apt -fix-broken install
sudo apt-get install qt4-default
sudo dpkg -i sasm_3.9.0_amd64.deb

명령창 환경에서 어셈블리 소스를 가지고 실행파일을 만드는 방법은 다음과 같다 소스파일은 어셈블러에 의해 중간파일로
만들어지고 중간파일을 이용해서 링커는 최종 실행파일을 만든다 

	   t.asm(소스)
nasm(어셈블러)   |
	   t.o(중간파일)
gcc(링커)       |
	   t(실행파일)


어셈블(중간파일 만들기)
-nasm -g -f  elf  <소스이름> -o <중간파일 이름>  (32비트모드)
-nasm -g -f elf64  <소스이름> -o <중간파일 이름> (64비트모드)

링킹(실행파일 만들기)
-gcc <중간파일 이름> -g -o  <실행파일 이름> -m32
-gcc <중간파일 이름> -g -o <실행파일 이름> -m64
옵션 :   -g (목적파일에 디버깅을 위한 정보들(변수이름, 모듈이름)을 추가로 기록해 두는 옵션으로 생략해도 무방하지만 gdb등으로 추가 분석을 할떄 도움이 된다
-f (생성되는 파일 형식을 지정해준다 )
-o (생성되는 파일 이름을 지정해준다 )

NASM에서 2개 이상의 모듈을 사용해서 어셈블리 프로그래밍을 해야 하는 경우 동일한 모듈 내부에 있는 프로시저는 특별한 조치 없이
가능하다 만약 다른 모듈에 있는 프로시저를 사용하고 싶으면 아래와 같은 설정이 필요하다 

프로시저 서비스를 제공하는 모듈
-프로시저 코딩한 후 모듈 제일 위쪽에 global지시어를 사용해서 프로시저의 외부 사용을 위한 공개를 선언한다
프로시저 서비스를 사용하려고 하는 모듈
-모듈의 제일 위쪽에 extern지시어를 사용해서 서비스를 받으려고 하는 프로시저의 이름이 외부 모듈 어딘가에 있다는 것을 선언한다 

NASM에서 다중 모듈 실행파일을 만드는 방법은 먼저 각각의 모듈을 어셈블 해서 중간파일을 만들고 링커를 이용해서 1개의 실행파일을 만든다

io.inc/io64.inc파일은 SASM이 설치된 폴더의 include서브 폴더에서 발견할 수 있다 이 파일에 대한 실제 구현 파일은 SASM
폴더의 서브 폴더인 NASM폴더에 macro.c파일로 존재한다 여기에 있는 io.inc/io64.inc 파일과 macro.c파일을 작업파일로 복사하면된다
이후 자신의 코드에 %include "io.inc"를 포함하고 필요한 함수를 사용하여 코딩한다 macro.c중간 코드를만들기 위해 다음과
같은 절차를 거치면 된다 32비트와 64비트 모두 동일한 중간파일만들기 과정을 거치기 떄문에 이름을 적절히 부여해야한다
macro.c 중간코드 만들기
-gcc -c macro.c -m32 (32비트) => macro.o
-gcc -c macro.c -m64 (64비트) => macro.o
어셈블은 특별한 옵션이 없으며 링킹 시 macro.o 또는 macro64.o파일을 추가하면 된다
macro.o파일은 io.inc파일의 본체 파일을 어셈블하여 중간파일로 만든 것이다 io.inc에는 선언만 있고 내용이 없는 프로시저들이있다
이 내용들은 macro.o중간파일에 있기 떄문에 io.inc파일을 사용하는 경우 링킹 시 macro.o파일을 같이 링킹해야한다 

어셈블 (중간파일 만들기)
-nasm -g -f elf test.asm -o test.obj(32bit)
-nasm -g -f elftest64 test.asm -o test.obj(64bit)

링킹(실행파일 만들기)
-gcc test.obj macro.o -g -o  test -m32(32bit)
-gcc test.obj macro64.o -g -o test -m64(64bit)


C의 함수들은 중간파일로 구현되어 있어 C로 만든 프로그램을 컴파일 할때 링킹이 일어나게 된다 따라서 이러한 C의 중간파일은
어셈블리 언어에서 사용이 가능하다 C의 중간파일은 /lib32서브폴더에 존재한다 

어셈블리 프로그램에서 C의 printf()함수를 사용하려면 다음과 같은 절차를 따르면 된다 
32bit기준
소드 코드 코등
-extern printf (외부 함수 존재 선언 , 함수 이름 앞에 _를 반드시 붙여야 한다)
-push parameter (함수 파라미터 설정)
-call printf (함수호출)
-add esp , 파라미터 크기( 스택 복구)
어셈블(중간파일 만들기)
-nasm.exe -g -f elf t1.asm -o t1.obj
링킹(실행파일 만들기)
-gcc.exe t1.obj -g -o t1 -m32
-묵시적 링킹 : 별도의 중간파일명을 명기하지 않아도 gcc가 자동으로 링킹 

C로 만들어진 소스의 중간파일 생성은 컴파일러가 수행하고 중간파일을 실행파일로 만드는 것도 링커가 수행한다 

컴파일(중간파일 만들기)
-gcc -c <소스파일 이름> -m32(32bit일떄) ex) gcc -c t1.c -m32
-<소스파일 이름>.o로 중간파일이 만들어진다

링킹(실행파일 만들기)
-gcc <중간파일> -o <실행파일> -m32(32bit일때)  ex) gcc t1.o -o t1 -m32
-C의 표준 함수들의 중간파일들은 묵시적으로 링킹된다 


리눅스운영체제의 실행과 관련된 코드들은 여러 개의 물리적 파일로 분산되어 구성되어 있다 대부분 /boot폴더에 있으며
vmlinuz*로 시작하는 파일이 핵심 파일이다 커널 소스는 일반적으로 /usr/src폴더에 있다 

C함수를 어셈블리가 사용하려면 __edecl방식을 사용하는데 리눅스 커널 서비스를 설계했던 개발자들은 함수 호출 시 
파라미터를 레지스터를 사용하여 전달하는 방식을 취하였다 EAX,EBX,ECX,EDX,ESI,EDI,EBP레지스터를 주로 사용하는데
EAX레지스터에는 시스템 콜 번호를 전달한다 만약 시스템 콜 함수의 파라미터가 6개가 넘는경우 EBX레지스터에 나머지 
파라미터가 있는 곳의 메모리 주소를 전달하는 방식으로 확장된다 시스템 콜 함수의 리턴 값은 AX레지스터를 통해 받는다


SASM환경에서 시스템 콜을 사용하는 방법은 다음과 같다 예를들어 sys_write 시스템콜은 EAX,EBX,ECX,EDX에 파라미터를 전달하고
EAX레지스터에서 결과를 받는다 
</리눅스>

